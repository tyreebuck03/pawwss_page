{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getTokenRefreshIntervalMilliseconds = exports.isTokenRefreshRequired = exports.hasExpired = void 0;\n/* eslint-disable import/prefer-default-export */\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst isApproachingExpiry = (currentExpiry, tokenExpirationMarginSeconds) => {\n  const now = Math.floor(Date.now() / 1000);\n  logger_1.default.debug('checking if the token is approaching expiry', {\n    tokenExpirationMarginSeconds,\n    currentExpiry,\n    now,\n    approachingExpiryResult: currentExpiry - now < tokenExpirationMarginSeconds\n  });\n  return currentExpiry - now < tokenExpirationMarginSeconds;\n};\n\nconst hasExpired = expiryTime => {\n  if (!expiryTime) return false;\n  const now = Math.floor(Date.now() / 1000);\n  return now >= expiryTime;\n};\n\nexports.hasExpired = hasExpired;\n\nconst isTokenRefreshRequired = _ref => {\n  let {\n    gatewayToken,\n    tokenExpirationMarginSeconds\n  } = _ref;\n  const {\n    expiryTime\n  } = gatewayToken;\n  if (!expiryTime) return false;\n  return (0, exports.hasExpired)(expiryTime) || isApproachingExpiry(expiryTime, tokenExpirationMarginSeconds);\n};\n\nexports.isTokenRefreshRequired = isTokenRefreshRequired;\n\nconst getTokenRefreshIntervalMilliseconds = (expiryTime, tokenExpirationMarginSeconds) => {\n  const now = Math.floor(Date.now() / 1000);\n  const interval = expiryTime - now - tokenExpirationMarginSeconds;\n  return interval > 0 ? interval * 1000 : 0;\n};\n\nexports.getTokenRefreshIntervalMilliseconds = getTokenRefreshIntervalMilliseconds;","map":{"version":3,"sources":["/home/ubuntu/Documents/A-Labs/Code Project/Web/template/tem_01/tem_01/node_modules/@civic/solana-gateway-react/dist/esm/utils/tokenUtils.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","getTokenRefreshIntervalMilliseconds","isTokenRefreshRequired","hasExpired","logger_1","require","isApproachingExpiry","currentExpiry","tokenExpirationMarginSeconds","now","Math","floor","Date","default","debug","approachingExpiryResult","expiryTime","gatewayToken","interval"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGAE,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,mCAAR,GAA8CF,OAAO,CAACG,sBAAR,GAAiCH,OAAO,CAACI,UAAR,GAAqB,KAAK,CAAzG;AACA;;AACA,MAAMC,QAAQ,GAAGV,eAAe,CAACW,OAAO,CAAC,WAAD,CAAR,CAAhC;;AACA,MAAMC,mBAAmB,GAAG,CAACC,aAAD,EAAgBC,4BAAhB,KAAiD;AACzE,QAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACH,GAAL,KAAa,IAAxB,CAAZ;AACAL,EAAAA,QAAQ,CAACS,OAAT,CAAiBC,KAAjB,CAAuB,6CAAvB,EAAsE;AAClEN,IAAAA,4BADkE;AAElED,IAAAA,aAFkE;AAGlEE,IAAAA,GAHkE;AAIlEM,IAAAA,uBAAuB,EAAER,aAAa,GAAGE,GAAhB,GAAsBD;AAJmB,GAAtE;AAMA,SAAOD,aAAa,GAAGE,GAAhB,GAAsBD,4BAA7B;AACH,CATD;;AAUA,MAAML,UAAU,GAAIa,UAAD,IAAgB;AAC/B,MAAI,CAACA,UAAL,EACI,OAAO,KAAP;AACJ,QAAMP,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACH,GAAL,KAAa,IAAxB,CAAZ;AACA,SAAOA,GAAG,IAAIO,UAAd;AACH,CALD;;AAMAjB,OAAO,CAACI,UAAR,GAAqBA,UAArB;;AACA,MAAMD,sBAAsB,GAAG,QAAqD;AAAA,MAApD;AAAEe,IAAAA,YAAF;AAAgBT,IAAAA;AAAhB,GAAoD;AAChF,QAAM;AAAEQ,IAAAA;AAAF,MAAiBC,YAAvB;AACA,MAAI,CAACD,UAAL,EACI,OAAO,KAAP;AACJ,SAAO,CAAC,GAAGjB,OAAO,CAACI,UAAZ,EAAwBa,UAAxB,KAAuCV,mBAAmB,CAACU,UAAD,EAAaR,4BAAb,CAAjE;AACH,CALD;;AAMAT,OAAO,CAACG,sBAAR,GAAiCA,sBAAjC;;AACA,MAAMD,mCAAmC,GAAG,CAACe,UAAD,EAAaR,4BAAb,KAA8C;AACtF,QAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACH,GAAL,KAAa,IAAxB,CAAZ;AACA,QAAMS,QAAQ,GAAGF,UAAU,GAAGP,GAAb,GAAmBD,4BAApC;AACA,SAAOU,QAAQ,GAAG,CAAX,GAAeA,QAAQ,GAAG,IAA1B,GAAiC,CAAxC;AACH,CAJD;;AAKAnB,OAAO,CAACE,mCAAR,GAA8CA,mCAA9C","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getTokenRefreshIntervalMilliseconds = exports.isTokenRefreshRequired = exports.hasExpired = void 0;\n/* eslint-disable import/prefer-default-export */\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst isApproachingExpiry = (currentExpiry, tokenExpirationMarginSeconds) => {\n    const now = Math.floor(Date.now() / 1000);\n    logger_1.default.debug('checking if the token is approaching expiry', {\n        tokenExpirationMarginSeconds,\n        currentExpiry,\n        now,\n        approachingExpiryResult: currentExpiry - now < tokenExpirationMarginSeconds,\n    });\n    return currentExpiry - now < tokenExpirationMarginSeconds;\n};\nconst hasExpired = (expiryTime) => {\n    if (!expiryTime)\n        return false;\n    const now = Math.floor(Date.now() / 1000);\n    return now >= expiryTime;\n};\nexports.hasExpired = hasExpired;\nconst isTokenRefreshRequired = ({ gatewayToken, tokenExpirationMarginSeconds, }) => {\n    const { expiryTime } = gatewayToken;\n    if (!expiryTime)\n        return false;\n    return (0, exports.hasExpired)(expiryTime) || isApproachingExpiry(expiryTime, tokenExpirationMarginSeconds);\n};\nexports.isTokenRefreshRequired = isTokenRefreshRequired;\nconst getTokenRefreshIntervalMilliseconds = (expiryTime, tokenExpirationMarginSeconds) => {\n    const now = Math.floor(Date.now() / 1000);\n    const interval = expiryTime - now - tokenExpirationMarginSeconds;\n    return interval > 0 ? interval * 1000 : 0;\n};\nexports.getTokenRefreshIntervalMilliseconds = getTokenRefreshIntervalMilliseconds;\n"]},"metadata":{},"sourceType":"script"}