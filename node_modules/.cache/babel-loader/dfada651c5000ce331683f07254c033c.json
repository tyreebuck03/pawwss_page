{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/Documents/A-Labs/Code Project/Web/template/tem_01/tem_01/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport { ConnectionProvider, WalletProvider } from \"@solana/wallet-adapter-react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { getPhantomWallet, getSlopeWallet, getSolflareWallet, getSolflareWebWallet, getSolletWallet, getSolletExtensionWallet, getSolongWallet, getLedgerWallet, getSafePalWallet } from \"@solana/wallet-adapter-wallets\";\nimport { WalletModalProvider } from '@solana/wallet-adapter-react-ui';\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\nconst candyMachineId = new anchor.web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_ID);\nconst network = process.env.REACT_APP_SOLANA_NETWORK;\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\nconst connection = new anchor.web3.Connection(rpcHost);\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n  palette: {\n    type: 'dark'\n  },\n  overrides: {\n    MuiButtonBase: {\n      root: {\n        justifyContent: 'flex-start'\n      }\n    },\n    MuiButton: {\n      root: {\n        textTransform: undefined,\n        padding: '12px 16px'\n      },\n      startIcon: {\n        marginRight: 8\n      },\n      endIcon: {\n        marginLeft: 8\n      }\n    }\n  }\n});\n\nconst App = () => {\n  _s();\n\n  // Custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), []); // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n  // Only the wallets you configure here will be compiled into your application, and only the dependencies\n  // of wallets that your users connect to will be loaded.\n\n  const wallets = useMemo(() => [getPhantomWallet(), getSlopeWallet(), getSolflareWallet(), getSolflareWebWallet(), getSolletWallet({\n    network\n  }), getSolletExtensionWallet({\n    network\n  }), getSolongWallet(), getLedgerWallet(), getSafePalWallet()], []);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(ConnectionProvider, {\n      endpoint: endpoint,\n      children: /*#__PURE__*/_jsxDEV(WalletProvider, {\n        wallets: wallets,\n        autoConnect: true,\n        children: /*#__PURE__*/_jsxDEV(WalletModalProvider, {\n          children: /*#__PURE__*/_jsxDEV(Home, {\n            candyMachineId: candyMachineId,\n            connection: connection,\n            txTimeout: txTimeout,\n            rpcHost: rpcHost\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"RNaTq20PjYTGasfEtgZ8qKkPMD0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ubuntu/Documents/A-Labs/Code Project/Web/template/tem_01/tem_01/src/App.tsx"],"names":["createTheme","ThemeProvider","useMemo","ConnectionProvider","WalletProvider","anchor","clusterApiUrl","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolflareWebWallet","getSolletWallet","getSolletExtensionWallet","getSolongWallet","getLedgerWallet","getSafePalWallet","WalletModalProvider","Home","require","candyMachineId","web3","PublicKey","process","env","REACT_APP_CANDY_MACHINE_ID","network","REACT_APP_SOLANA_NETWORK","rpcHost","REACT_APP_SOLANA_RPC_HOST","connection","Connection","txTimeout","theme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","undefined","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","wallets"],"mappings":"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","sourcesContent":["import { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { useMemo } from \"react\";\nimport {\n    ConnectionProvider,\n    WalletProvider,\n} from \"@solana/wallet-adapter-react\";\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n    getPhantomWallet,\n    getSlopeWallet,\n    getSolflareWallet,\n    getSolflareWebWallet,\n    getSolletWallet,\n    getSolletExtensionWallet,\n    getSolongWallet,\n    getLedgerWallet,\n    getSafePalWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n    WalletModalProvider\n} from '@solana/wallet-adapter-react-ui';\n\nimport \"./App.css\";\nimport Home from \"./Home\";\n\nrequire('@solana/wallet-adapter-react-ui/styles.css');\n\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n    // Custom RPC endpoint.\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n    // @solana/wallet-adapter-wallets includes all the adapters but supports tree shaking and lazy loading --\n    // Only the wallets you configure here will be compiled into your application, and only the dependencies\n    // of wallets that your users connect to will be loaded.\n    const wallets = useMemo(\n        () => [\n            getPhantomWallet(),\n            getSlopeWallet(),\n            getSolflareWallet(),\n            getSolflareWebWallet(),\n            getSolletWallet({ network }),\n            getSolletExtensionWallet({ network }),\n            getSolongWallet(),\n            getLedgerWallet(),\n            getSafePalWallet(),\n        ],\n        []\n    );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect={true}>\n            <WalletModalProvider>\n              <Home\n                candyMachineId={candyMachineId}\n                connection={connection}\n                txTimeout={txTimeout}\n                rpcHost={rpcHost}\n              />\n            </WalletModalProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}