{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldRefreshTokenForRecordState = void 0;\n\nconst react_1 = require(\"react\");\n\nconst config_1 = require(\"../solana/config\");\n\nconst tokenUtils_1 = require(\"../utils/tokenUtils\");\n\nconst logger_1 = __importDefault(require(\"../logger\"));\n\nconst types_1 = require(\"../types\");\n\nconst useChain_1 = __importDefault(require(\"./useChain\"));\n\nconst useRefresh_1 = __importDefault(require(\"./useRefresh\"));\n\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\n\nconst actionCreator_1 = require(\"../actionCreator\");\n\nconst usePOWO_1 = __importDefault(require(\"./usePOWO\"));\n\nconst useGatekeeper_1 = __importDefault(require(\"./useGatekeeper\"));\n\nconst useGatekeeperRecord_1 = __importDefault(require(\"./useGatekeeperRecord\"));\n\nconst networkConfig_1 = __importDefault(require(\"../networkConfig\"));\n\nconst useCivicPass_1 = __importDefault(require(\"./useCivicPass\"));\n\nconst useCivicPassEventListener_1 = __importDefault(require(\"./useCivicPassEventListener\"));\n\nconst shouldRefreshTokenForRecordState = (state, gatewayToken, useWallet, powoRequested) => {\n  if (!gatewayToken) return false;\n  if (gatewayToken.state !== types_1.State.ACTIVE) return false;\n  if (!useWallet || !useWallet.publicKey || powoRequested) return false;\n  return state !== types_1.GatekeeperRecordState.ISSUED;\n};\n\nexports.shouldRefreshTokenForRecordState = shouldRefreshTokenForRecordState;\n/**\n * The orchestrator hook handles the main business logic of the component handling 2 main scenarios:\n * 1. the creation of a new gateway token for a new user\n * 2. the refreshing of an existing token for an existing user\n *\n * The orchestrator triggers uses effects to trigger flows for these two scenarios\n *\n * @param {{ wallet: WalletAdapter | undefined; clusterUrl: string; gatekeeperNetworkAddress: string | undefined; stage: string }} param0\n * @param {Partial<RootState>} state\n * @param {React.Dispatch<Action>} dispatch\n * @returns void\n */\n\nconst useOrchestration = (_ref, state, dispatch) => {\n  let {\n    wallet,\n    stage,\n    chainImplementation,\n    gatekeeperClient\n  } = _ref;\n  const {\n    expectWalletConnected\n  } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n  const gatekeeperEndpoint = (0, config_1.getGatekeeperEndpoint)(stage);\n  const {\n    gatewayToken,\n    tokenRequested,\n    refreshIntervalId,\n    powoRequested,\n    refreshInProgress,\n    walletToRefresh,\n    civicPass,\n    refreshTokenState,\n    gatewayStatus,\n    gatekeeperNetworkAddress\n  } = state;\n  const networkConfig = (0, networkConfig_1.default)({\n    gatekeeperNetworkAddress,\n    stage\n  }); // Register our hooks here\n\n  const {\n    waitForConfirmPOWO,\n    waitForPOWO\n  } = (0, usePOWO_1.default)({\n    wallet,\n    chainImplementation\n  }, state, dispatch);\n  const {\n    waitForGatekeeperIssuanceRequest\n  } = (0, useGatekeeper_1.default)({\n    wallet,\n    stage,\n    gatekeeperClient\n  }, state, dispatch);\n  const {\n    setRefreshPoll,\n    refreshTokenWithProof,\n    waitForUnexpiredGatewayToken\n  } = (0, useRefresh_1.default)({\n    stage,\n    gatekeeperClient,\n    networkConfig\n  }, state, dispatch);\n  (0, useCivicPass_1.default)({\n    wallet\n  }, state, dispatch);\n  (0, useCivicPassEventListener_1.default)({\n    wallet,\n    chainImplementation\n  });\n  (0, useChain_1.default)({\n    wallet,\n    chainImplementation,\n    networkConfig\n  }, state, dispatch);\n  (0, useGatekeeperRecord_1.default)({\n    wallet,\n    gatekeeperClient,\n    httpConfig: chainImplementation.httpConfig,\n    networkConfig\n  }, state, dispatch);\n  /**\n   * Refresh Flows ----------------------------------------------------------------\n   */\n\n  /**\n   * wait until we have a payload that has been emitted by the CivicPass iframe\n   * then resolve the promise\n   */\n\n  const waitForCivicPassRefreshResponsePayload = (0, react_1.useCallback)(() => {\n    expectWalletConnected();\n    logger_1.default.debug('waitForCivicPassRefreshResponsePayload');\n    const result = new Promise(resolve => {\n      const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n      const refreshPayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.REFRESH];\n      logger_1.default.debug('Refresh payload...', {\n        refreshPayload,\n        refreshPayloadState: refreshPayload === undefined\n      });\n\n      if (refreshPayload !== undefined) {\n        logger_1.default.debug('Refreshing token...');\n        resolve(refreshPayload);\n      }\n    });\n    return result;\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n  /**\n   * wait until a gateway token exists in state before resolving the promise\n   */\n\n  const waitForGatewayToken = (0, react_1.useCallback)(() => {\n    expectWalletConnected();\n    return new Promise(resolve => {\n      logger_1.default.debug('waitForGatewayToken gatewayToken', !!gatewayToken);\n      if (gatewayToken) resolve(gatewayToken);\n    });\n  }, [gatewayToken, expectWalletConnected]);\n\n  const shouldRefreshToken = async () => {\n    if (!gatewayToken) return false;\n    const {\n      requiresGatekeeperRecordStatusCheck,\n      tokenExpirationMarginSeconds\n    } = networkConfig;\n\n    if (requiresGatekeeperRecordStatusCheck) {\n      const useWallet = walletToRefresh || wallet;\n      const record = await gatekeeperClient().getGatekeeperRecordWithPayload(gatewayToken.owner);\n      dispatch({\n        type: 'getGatekeeperRecord_success',\n        gatekeeperRecord: record\n      });\n      return (0, exports.shouldRefreshTokenForRecordState)(record.state, gatewayToken, useWallet, powoRequested);\n    } // Check for token expiration locally\n\n\n    return (0, tokenUtils_1.isTokenRefreshRequired)({\n      gatewayToken,\n      tokenExpirationMarginSeconds\n    });\n  };\n\n  const checkRefreshRequired = (0, react_1.useCallback)(async connectedWallet => {\n    const useWallet = walletToRefresh || connectedWallet; // prefer the wallet set in state, this handles polling after disconnect\n    // Check preconditions for refresh:\n\n    await waitForGatewayToken();\n    const shouldRefresh = await shouldRefreshToken();\n\n    if (!shouldRefresh) {\n      logger_1.default.debug('Refresh not needed. Skipping this attempt.');\n      dispatch({\n        type: 'refresh_complete'\n      });\n      setRefreshPoll(useWallet);\n      return;\n    }\n\n    logger_1.default.debug('Refresh required. Running the refresh flow.');\n    clearInterval(refreshIntervalId);\n    dispatch({\n      type: 'refresh_start'\n    });\n    dispatch({\n      type: 'civicPass_check_token_status'\n    });\n    dispatch({\n      type: 'refresh_clear_interval'\n    });\n  }, [gatekeeperEndpoint, gatewayToken, powoRequested, refreshInProgress, refreshIntervalId, wallet, walletToRefresh]);\n  /**\n   * Check if the user needs to refresh their roken\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (refreshTokenState === types_1.RefreshTokenState.CHECK_TOKEN_EXPIRATION) {\n      logger_1.default.debug('Checking if refresh required');\n      checkRefreshRequired();\n    }\n  }, [refreshTokenState]);\n  /**\n   * If the user cancels out of the refresh flow start the refresh interval\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (refreshTokenState === types_1.RefreshTokenState.CANCELLED || refreshTokenState === types_1.RefreshTokenState.FAILED) {\n      logger_1.default.debug('User canceled out of the refresh flow');\n      setRefreshPoll(wallet);\n    }\n  }, [refreshTokenState]);\n  /**\n   * When we have a token start polling to determine the refresh state\n   */\n\n  (0, react_1.useEffect)(() => {\n    if (gatewayStatus === types_1.GatewayStatus.ACTIVE) {\n      logger_1.default.debug('Start polling for the refresh interval');\n      setRefreshPoll(wallet);\n    }\n  }, [gatewayStatus]);\n  /**\n   * Issuance Flows ----------------------------------------------------------------\n   */\n\n  /**\n   * poll until a gatekeeper record is found, once active check the chain for a token\n   * then dispatch a tokenChange event that will result in the token getting saved to state\n   * start token refresh polling once a valid token is set\n   */\n\n  const waitForOnChainToken = (0, react_1.useCallback)(async () => {\n    if (wallet) {\n      logger_1.default.debug('waitForOnChainToken');\n      const actionCreator = (0, actionCreator_1.gatewayTokenActionCreator)({\n        wallet,\n        chainImplementation,\n        gatekeeperClient,\n        dispatch,\n        networkConfig\n      });\n      await actionCreator.waitForGatewayToken();\n    }\n\n    return null;\n  }, [gatekeeperEndpoint, gatekeeperClient, expectWalletConnected]);\n  /**\n   * wait until a presentation request id has been emitted by the CivicPass iframe\n   * then resolve the promise\n   */\n\n  const waitForCivicPassIssuanceResponsePayload = (0, react_1.useCallback)(() => {\n    expectWalletConnected();\n    logger_1.default.debug('waitForCivicPassIssuanceResponsePayload');\n    const result = new Promise(resolve => {\n      const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n      const issuancePayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.ISSUANCE];\n      logger_1.default.debug('Issuance payload...', issuancePayload);\n\n      if (issuancePayload !== undefined) {\n        resolve(issuancePayload);\n      }\n    });\n    return result;\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n  /**\n   * wait until the user has requested a gateway token before resolving the promise\n   */\n\n  const waitForTokenRequested = (0, react_1.useCallback)(() => {\n    expectWalletConnected();\n    return new Promise(resolve => {\n      logger_1.default.debug('waitForTokenRequested tokenRequested', tokenRequested);\n      if (tokenRequested) resolve(true);\n    });\n  }, [tokenRequested, expectWalletConnected]);\n  /**\n   * wait until the user has requested a gateway token before resolving the promise\n   */\n\n  const checkForRequiredProof = (0, react_1.useCallback)(async _ref2 => {\n    let {\n      requiresProofOfWalletOwnership,\n      payload\n    } = _ref2;\n    logger_1.default.debug('Checking for required proof', {\n      requiresProofOfWalletOwnership,\n      payload\n    });\n\n    if (requiresProofOfWalletOwnership) {\n      const result = await waitForConfirmPOWO(payload).then(waitForPOWO);\n      return result;\n    }\n\n    return {\n      payload\n    };\n  }, [waitForConfirmPOWO, waitForPOWO]);\n  /**\n   * New token request flow:\n   * wait for the user to request a new token\n   * wait for the iframe to return a payload\n   * wait for the user to confirm they've read the proof of ownership dialogue\n   * wait for the user to provide proof of ownership\n   * wait for a call to the gatekeeper to request a new token issuance\n   * wait for a gatekeeper record to be created\n   * once this flow is complete a new Gatekeeper token should be available and set in state\n   */\n\n  (0, react_1.useEffect)(() => {\n    waitForTokenRequested().then(waitForCivicPassIssuanceResponsePayload).then(checkForRequiredProof).then(waitForGatekeeperIssuanceRequest).then(waitForOnChainToken).then(() => setRefreshPoll(wallet)).catch(error => logger_1.default.error('ERROR newTokenRequestFlow', error));\n  }, [waitForTokenRequested, waitForCivicPassIssuanceResponsePayload, checkForRequiredProof, waitForGatekeeperIssuanceRequest, waitForOnChainToken]);\n  /**\n   * Refresh start flow:\n   * Triggered when we have a refreshResponse payload\n   * wait refresh to be triggered from the iFrame\n   * wait for the iframe to return a payload\n   * wait for the user to confirm they've read the proof of ownership dialogue\n   * wait for the user to provide proof of ownership\n   * wait for a call to the gatekeeper to refresh the token\n   * check if token is expired and timeout if token does not update within timeframe\n   */\n\n  (0, react_1.useEffect)(() => {\n    const useWallet = walletToRefresh || wallet;\n    waitForCivicPassRefreshResponsePayload().then(checkForRequiredProof).then(refreshTokenWithProof(useWallet)).then(waitForUnexpiredGatewayToken).catch(error => {\n      logger_1.default.error('refreshFlow', error);\n      logger_1.default.error('refreshToken error', error);\n      dispatch({\n        type: 'refresh_complete'\n      });\n      setRefreshPoll(useWallet);\n    });\n  }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, checkForRequiredProof]);\n  /**\n   * Refresh complete flow:\n   * Triggered by token change event\n   * Check the refresh token state\n   * Check if token is unexpired and clear timeout if token is not expired\n   * Complete the refresh event and clear the refresh response payload\n   */\n\n  (0, react_1.useEffect)(() => {\n    const useWallet = walletToRefresh || wallet;\n\n    if (refreshTokenState === types_1.RefreshTokenState.WAIT_FOR_ON_CHAIN) {\n      waitForUnexpiredGatewayToken().then(() => setRefreshPoll(useWallet)).then(() => {\n        dispatch({\n          type: 'refresh_complete'\n        });\n      }).catch(error => {\n        logger_1.default.error('refreshFlow', error);\n        logger_1.default.error('refreshToken error', error);\n        dispatch({\n          type: 'refresh_complete'\n        });\n        setRefreshPoll(useWallet);\n      });\n    }\n  }, [gatewayToken, refreshTokenState]);\n};\n\nexports.default = useOrchestration;","map":{"version":3,"sources":["/home/ubuntu/Documents/A-Labs/Code Project/Web/candy-machine-v2-responsive-ui/node_modules/@civic/solana-gateway-react/dist/esm/useHooks/useOrchestration.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","shouldRefreshTokenForRecordState","react_1","require","config_1","tokenUtils_1","logger_1","types_1","useChain_1","useRefresh_1","useWalletHooks_1","actionCreator_1","usePOWO_1","useGatekeeper_1","useGatekeeperRecord_1","networkConfig_1","useCivicPass_1","useCivicPassEventListener_1","state","gatewayToken","useWallet","powoRequested","State","ACTIVE","publicKey","GatekeeperRecordState","ISSUED","useOrchestration","dispatch","wallet","stage","chainImplementation","gatekeeperClient","expectWalletConnected","default","gatekeeperEndpoint","getGatekeeperEndpoint","tokenRequested","refreshIntervalId","refreshInProgress","walletToRefresh","civicPass","refreshTokenState","gatewayStatus","gatekeeperNetworkAddress","networkConfig","waitForConfirmPOWO","waitForPOWO","waitForGatekeeperIssuanceRequest","setRefreshPoll","refreshTokenWithProof","waitForUnexpiredGatewayToken","httpConfig","waitForCivicPassRefreshResponsePayload","useCallback","debug","result","Promise","resolve","responsePayload","refreshPayload","CivicPassMessageAction","REFRESH","refreshPayloadState","undefined","waitForGatewayToken","shouldRefreshToken","requiresGatekeeperRecordStatusCheck","tokenExpirationMarginSeconds","record","getGatekeeperRecordWithPayload","owner","type","gatekeeperRecord","isTokenRefreshRequired","checkRefreshRequired","connectedWallet","shouldRefresh","clearInterval","useEffect","RefreshTokenState","CHECK_TOKEN_EXPIRATION","CANCELLED","FAILED","GatewayStatus","waitForOnChainToken","actionCreator","gatewayTokenActionCreator","waitForCivicPassIssuanceResponsePayload","issuancePayload","ISSUANCE","waitForTokenRequested","checkForRequiredProof","requiresProofOfWalletOwnership","payload","then","catch","error","WAIT_FOR_ON_CHAIN"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shouldRefreshTokenForRecordState = void 0;\nconst react_1 = require(\"react\");\nconst config_1 = require(\"../solana/config\");\nconst tokenUtils_1 = require(\"../utils/tokenUtils\");\nconst logger_1 = __importDefault(require(\"../logger\"));\nconst types_1 = require(\"../types\");\nconst useChain_1 = __importDefault(require(\"./useChain\"));\nconst useRefresh_1 = __importDefault(require(\"./useRefresh\"));\nconst useWalletHooks_1 = __importDefault(require(\"./useWalletHooks\"));\nconst actionCreator_1 = require(\"../actionCreator\");\nconst usePOWO_1 = __importDefault(require(\"./usePOWO\"));\nconst useGatekeeper_1 = __importDefault(require(\"./useGatekeeper\"));\nconst useGatekeeperRecord_1 = __importDefault(require(\"./useGatekeeperRecord\"));\nconst networkConfig_1 = __importDefault(require(\"../networkConfig\"));\nconst useCivicPass_1 = __importDefault(require(\"./useCivicPass\"));\nconst useCivicPassEventListener_1 = __importDefault(require(\"./useCivicPassEventListener\"));\nconst shouldRefreshTokenForRecordState = (state, gatewayToken, useWallet, powoRequested) => {\n    if (!gatewayToken)\n        return false;\n    if (gatewayToken.state !== types_1.State.ACTIVE)\n        return false;\n    if (!useWallet || !useWallet.publicKey || powoRequested)\n        return false;\n    return state !== types_1.GatekeeperRecordState.ISSUED;\n};\nexports.shouldRefreshTokenForRecordState = shouldRefreshTokenForRecordState;\n/**\n * The orchestrator hook handles the main business logic of the component handling 2 main scenarios:\n * 1. the creation of a new gateway token for a new user\n * 2. the refreshing of an existing token for an existing user\n *\n * The orchestrator triggers uses effects to trigger flows for these two scenarios\n *\n * @param {{ wallet: WalletAdapter | undefined; clusterUrl: string; gatekeeperNetworkAddress: string | undefined; stage: string }} param0\n * @param {Partial<RootState>} state\n * @param {React.Dispatch<Action>} dispatch\n * @returns void\n */\nconst useOrchestration = ({ wallet, stage, chainImplementation, gatekeeperClient, }, state, dispatch) => {\n    const { expectWalletConnected } = (0, useWalletHooks_1.default)(wallet, state, dispatch);\n    const gatekeeperEndpoint = (0, config_1.getGatekeeperEndpoint)(stage);\n    const { gatewayToken, tokenRequested, refreshIntervalId, powoRequested, refreshInProgress, walletToRefresh, civicPass, refreshTokenState, gatewayStatus, gatekeeperNetworkAddress, } = state;\n    const networkConfig = (0, networkConfig_1.default)({ gatekeeperNetworkAddress, stage });\n    // Register our hooks here\n    const { waitForConfirmPOWO, waitForPOWO } = (0, usePOWO_1.default)({ wallet, chainImplementation }, state, dispatch);\n    const { waitForGatekeeperIssuanceRequest } = (0, useGatekeeper_1.default)({ wallet, stage, gatekeeperClient }, state, dispatch);\n    const { setRefreshPoll, refreshTokenWithProof, waitForUnexpiredGatewayToken } = (0, useRefresh_1.default)({ stage, gatekeeperClient, networkConfig }, state, dispatch);\n    (0, useCivicPass_1.default)({ wallet }, state, dispatch);\n    (0, useCivicPassEventListener_1.default)({ wallet, chainImplementation });\n    (0, useChain_1.default)({ wallet, chainImplementation, networkConfig }, state, dispatch);\n    (0, useGatekeeperRecord_1.default)({ wallet, gatekeeperClient, httpConfig: chainImplementation.httpConfig, networkConfig }, state, dispatch);\n    /**\n     * Refresh Flows ----------------------------------------------------------------\n     */\n    /**\n     * wait until we have a payload that has been emitted by the CivicPass iframe\n     * then resolve the promise\n     */\n    const waitForCivicPassRefreshResponsePayload = (0, react_1.useCallback)(() => {\n        expectWalletConnected();\n        logger_1.default.debug('waitForCivicPassRefreshResponsePayload');\n        const result = new Promise((resolve) => {\n            const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n            const refreshPayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.REFRESH];\n            logger_1.default.debug('Refresh payload...', {\n                refreshPayload,\n                refreshPayloadState: refreshPayload === undefined,\n            });\n            if (refreshPayload !== undefined) {\n                logger_1.default.debug('Refreshing token...');\n                resolve(refreshPayload);\n            }\n        });\n        return result;\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n    /**\n     * wait until a gateway token exists in state before resolving the promise\n     */\n    const waitForGatewayToken = (0, react_1.useCallback)(() => {\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger_1.default.debug('waitForGatewayToken gatewayToken', !!gatewayToken);\n            if (gatewayToken)\n                resolve(gatewayToken);\n        });\n    }, [gatewayToken, expectWalletConnected]);\n    const shouldRefreshToken = async () => {\n        if (!gatewayToken)\n            return false;\n        const { requiresGatekeeperRecordStatusCheck, tokenExpirationMarginSeconds } = networkConfig;\n        if (requiresGatekeeperRecordStatusCheck) {\n            const useWallet = walletToRefresh || wallet;\n            const record = await gatekeeperClient().getGatekeeperRecordWithPayload(gatewayToken.owner);\n            dispatch({ type: 'getGatekeeperRecord_success', gatekeeperRecord: record });\n            return (0, exports.shouldRefreshTokenForRecordState)(record.state, gatewayToken, useWallet, powoRequested);\n        }\n        // Check for token expiration locally\n        return (0, tokenUtils_1.isTokenRefreshRequired)({ gatewayToken, tokenExpirationMarginSeconds });\n    };\n    const checkRefreshRequired = (0, react_1.useCallback)(async (connectedWallet) => {\n        const useWallet = walletToRefresh || connectedWallet; // prefer the wallet set in state, this handles polling after disconnect\n        // Check preconditions for refresh:\n        await waitForGatewayToken();\n        const shouldRefresh = await shouldRefreshToken();\n        if (!shouldRefresh) {\n            logger_1.default.debug('Refresh not needed. Skipping this attempt.');\n            dispatch({ type: 'refresh_complete' });\n            setRefreshPoll(useWallet);\n            return;\n        }\n        logger_1.default.debug('Refresh required. Running the refresh flow.');\n        clearInterval(refreshIntervalId);\n        dispatch({ type: 'refresh_start' });\n        dispatch({ type: 'civicPass_check_token_status' });\n        dispatch({ type: 'refresh_clear_interval' });\n    }, [gatekeeperEndpoint, gatewayToken, powoRequested, refreshInProgress, refreshIntervalId, wallet, walletToRefresh]);\n    /**\n     * Check if the user needs to refresh their roken\n     */\n    (0, react_1.useEffect)(() => {\n        if (refreshTokenState === types_1.RefreshTokenState.CHECK_TOKEN_EXPIRATION) {\n            logger_1.default.debug('Checking if refresh required');\n            checkRefreshRequired();\n        }\n    }, [refreshTokenState]);\n    /**\n     * If the user cancels out of the refresh flow start the refresh interval\n     */\n    (0, react_1.useEffect)(() => {\n        if (refreshTokenState === types_1.RefreshTokenState.CANCELLED || refreshTokenState === types_1.RefreshTokenState.FAILED) {\n            logger_1.default.debug('User canceled out of the refresh flow');\n            setRefreshPoll(wallet);\n        }\n    }, [refreshTokenState]);\n    /**\n     * When we have a token start polling to determine the refresh state\n     */\n    (0, react_1.useEffect)(() => {\n        if (gatewayStatus === types_1.GatewayStatus.ACTIVE) {\n            logger_1.default.debug('Start polling for the refresh interval');\n            setRefreshPoll(wallet);\n        }\n    }, [gatewayStatus]);\n    /**\n     * Issuance Flows ----------------------------------------------------------------\n     */\n    /**\n     * poll until a gatekeeper record is found, once active check the chain for a token\n     * then dispatch a tokenChange event that will result in the token getting saved to state\n     * start token refresh polling once a valid token is set\n     */\n    const waitForOnChainToken = (0, react_1.useCallback)(async () => {\n        if (wallet) {\n            logger_1.default.debug('waitForOnChainToken');\n            const actionCreator = (0, actionCreator_1.gatewayTokenActionCreator)({\n                wallet,\n                chainImplementation,\n                gatekeeperClient,\n                dispatch,\n                networkConfig,\n            });\n            await actionCreator.waitForGatewayToken();\n        }\n        return null;\n    }, [gatekeeperEndpoint, gatekeeperClient, expectWalletConnected]);\n    /**\n     * wait until a presentation request id has been emitted by the CivicPass iframe\n     * then resolve the promise\n     */\n    const waitForCivicPassIssuanceResponsePayload = (0, react_1.useCallback)(() => {\n        expectWalletConnected();\n        logger_1.default.debug('waitForCivicPassIssuanceResponsePayload');\n        const result = new Promise((resolve) => {\n            const responsePayload = civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload;\n            const issuancePayload = responsePayload && responsePayload[types_1.CivicPassMessageAction.ISSUANCE];\n            logger_1.default.debug('Issuance payload...', issuancePayload);\n            if (issuancePayload !== undefined) {\n                resolve(issuancePayload);\n            }\n        });\n        return result;\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, expectWalletConnected]);\n    /**\n     * wait until the user has requested a gateway token before resolving the promise\n     */\n    const waitForTokenRequested = (0, react_1.useCallback)(() => {\n        expectWalletConnected();\n        return new Promise((resolve) => {\n            logger_1.default.debug('waitForTokenRequested tokenRequested', tokenRequested);\n            if (tokenRequested)\n                resolve(true);\n        });\n    }, [tokenRequested, expectWalletConnected]);\n    /**\n     * wait until the user has requested a gateway token before resolving the promise\n     */\n    const checkForRequiredProof = (0, react_1.useCallback)(async ({ requiresProofOfWalletOwnership, payload, }) => {\n        logger_1.default.debug('Checking for required proof', { requiresProofOfWalletOwnership, payload });\n        if (requiresProofOfWalletOwnership) {\n            const result = await waitForConfirmPOWO(payload).then(waitForPOWO);\n            return result;\n        }\n        return { payload };\n    }, [waitForConfirmPOWO, waitForPOWO]);\n    /**\n     * New token request flow:\n     * wait for the user to request a new token\n     * wait for the iframe to return a payload\n     * wait for the user to confirm they've read the proof of ownership dialogue\n     * wait for the user to provide proof of ownership\n     * wait for a call to the gatekeeper to request a new token issuance\n     * wait for a gatekeeper record to be created\n     * once this flow is complete a new Gatekeeper token should be available and set in state\n     */\n    (0, react_1.useEffect)(() => {\n        waitForTokenRequested()\n            .then(waitForCivicPassIssuanceResponsePayload)\n            .then(checkForRequiredProof)\n            .then(waitForGatekeeperIssuanceRequest)\n            .then(waitForOnChainToken)\n            .then(() => setRefreshPoll(wallet))\n            .catch((error) => logger_1.default.error('ERROR newTokenRequestFlow', error));\n    }, [\n        waitForTokenRequested,\n        waitForCivicPassIssuanceResponsePayload,\n        checkForRequiredProof,\n        waitForGatekeeperIssuanceRequest,\n        waitForOnChainToken,\n    ]);\n    /**\n     * Refresh start flow:\n     * Triggered when we have a refreshResponse payload\n     * wait refresh to be triggered from the iFrame\n     * wait for the iframe to return a payload\n     * wait for the user to confirm they've read the proof of ownership dialogue\n     * wait for the user to provide proof of ownership\n     * wait for a call to the gatekeeper to refresh the token\n     * check if token is expired and timeout if token does not update within timeframe\n     */\n    (0, react_1.useEffect)(() => {\n        const useWallet = walletToRefresh || wallet;\n        waitForCivicPassRefreshResponsePayload()\n            .then(checkForRequiredProof)\n            .then(refreshTokenWithProof(useWallet))\n            .then(waitForUnexpiredGatewayToken)\n            .catch((error) => {\n            logger_1.default.error('refreshFlow', error);\n            logger_1.default.error('refreshToken error', error);\n            dispatch({ type: 'refresh_complete' });\n            setRefreshPoll(useWallet);\n        });\n    }, [civicPass === null || civicPass === void 0 ? void 0 : civicPass.responsePayload, checkForRequiredProof]);\n    /**\n     * Refresh complete flow:\n     * Triggered by token change event\n     * Check the refresh token state\n     * Check if token is unexpired and clear timeout if token is not expired\n     * Complete the refresh event and clear the refresh response payload\n     */\n    (0, react_1.useEffect)(() => {\n        const useWallet = walletToRefresh || wallet;\n        if (refreshTokenState === types_1.RefreshTokenState.WAIT_FOR_ON_CHAIN) {\n            waitForUnexpiredGatewayToken()\n                .then(() => setRefreshPoll(useWallet))\n                .then(() => {\n                dispatch({ type: 'refresh_complete' });\n            })\n                .catch((error) => {\n                logger_1.default.error('refreshFlow', error);\n                logger_1.default.error('refreshToken error', error);\n                dispatch({ type: 'refresh_complete' });\n                setRefreshPoll(useWallet);\n            });\n        }\n    }, [gatewayToken, refreshTokenState]);\n};\nexports.default = useOrchestration;\n"]},"metadata":{},"sourceType":"script"}